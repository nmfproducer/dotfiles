(let (var-pat const-pat op-pat open-pat close-pat)
   (setq const-pat '("λ" "apply" "pair" "left" "right" "inl" "inr" "case" "in0" "abort" "c-abs" "c-inst" "inst" "⊃" "∧" "∨" "¬" "⊥" "varref" "variable" "constant" "nonvoid" "nv-varseq" "varseq" "exp" "closed-exp" "is-in" "unit-term" "term" "unit-prop" "not-prop" "and-prop" "or-prop" "prop" "denotes" "judg" "s-judg" "b-judg" "0" "1" "Exp" "map" "nv-map" "abs"))
   (setq op-pat '("=" "≡" "∈" "\\+" "→"))
   (cal-deftokens))


(DefClass 'bj '(or (infix (infix term "→" term) ":" (or "unit-prop" "not-prop" "and-prop" "or-prop" "prop" "s-judg" "b-judg" "judg" "unit-term" "term" "Exp")) (infix (infix term "≡" term) ":" "prop") (infix (infix term "≡" term) ":" "term") (infix (infix term "≡" term) ":" "judg") (infix term "=" term) (infix term ":" "variable") (infix term ":" "varref") (infix term ":" "constant") (infix term ":" "nonvoid") (infix term ":" "nv-varseq") (infix term ":" "varseq") (infix term ":" "closed-exp") (infix term ":" "map") (infix term ":" "nv-map") (infix term "exp" term) (infix term "is-in" term) (infix (infix term ":" "prop") "denotes" term) (infix (infix term ":" "term") "denotes" term) (infix (infix term ":" "judg") "denotes" term) (infix term "Exp" term) (infix (prefix "+" (paren "(" (infix term "," term))) "=" term) (infix (prefix "pair" (paren "(" (infix term "," term))) "=" term) (infix (prefix "inst" (paren "(" (infix term "," term))) "=" term) (infix (prefix "abs" (paren "(" (infix term "," term))) "=" term) (throw "「%s」は基本判断ではありません")))


(DefClass 'term '(or varref (paren "《" unitlist)))


(DefClass 'exp '(or varref svar "nil" (paren "<" (infix exp "|" exp)) (paren "[" (infix map ";" skelton)) (throw "「%s」は式ではありません")))


(DefClass 'map '(or varref svar "0" "1" (paren "<" (infix map "|" map)) (throw "「%s」は地図ではありません")))


(DefClass 'skelton '(or varref svar "0" exp (paren "<" (infix skelton "|" skelton)) (prefix (paren "(" var) (paren "[" (infix map ";" skelton))) (throw "「%s」は骨格ではありません")))


(DefClass 'tex-bj '(or (tex-infix (tex-infix tex-term "→" tex-term) ":" (or "unit-prop" "not-prop" "and-prop" "or-prop" "prop" "s-judg" "b-judg" "judg" "unit-term" "term" "Exp")) (tex-infix (tex-infix tex-term "≡" tex-term) ":" "prop") (tex-infix (tex-infix tex-term "≡" tex-term) ":" "term") (tex-infix (tex-infix tex-term "≡" tex-term) ":" "judg") (tex-infix tex-term "=" tex-term) (tex-infix tex-term ":" "variable") (tex-infix tex-term ":" "varref") (tex-infix tex-term ":" "constant") (tex-infix tex-term ":" "nonvoid") (tex-infix tex-term ":" "nv-varseq") (tex-infix tex-term ":" "varseq") (tex-infix tex-term ":" "closed-exp") (tex-infix tex-term ":" "map") (tex-infix tex-term ":" "nv-map") (tex-infix tex-term "is-in" tex-term) (tex-infix tex-term "exp" tex-term) (tex-infix (tex-infix tex-term ":" "prop") "denotes" tex-term) (tex-infix (tex-infix tex-term ":" "term") "denotes" tex-term) (tex-infix (tex-infix tex-term ":" "judg") "denotes" tex-term) (tex-infix tex-term "Exp" tex-term) (tex-infix (tex-prefix (and "+" tex-op) (tex-paren "(" (tex-infix tex-term "," tex-term))) "=" tex-term) (tex-infix (tex-prefix (and "pair" tex-op) (tex-paren "(" (tex-infix tex-term "," tex-term))) "=" tex-term) (tex-infix (tex-prefix (and "inst" tex-op) (tex-paren "(" (tex-infix tex-term "," tex-term))) "=" tex-term) (tex-infix (tex-prefix (and "abs" tex-op) (tex-paren "(" (tex-infix tex-term "," tex-term))) "=" tex-term) (throw "「%s」は基本判断ではありません")))


(DefClass 'tex-term '(or tex-varref (tex-paren "《" tex-unitlist)))


(DefClass 'tex-exp '(or tex-varref svar (and "nil" tex-op) (tex-paren "<" (tex-infix tex-exp "|" tex-exp)) (tex-paren "[" (tex-infix tex-map ";" tex-skelton)) (throw "「%s」は式ではありません")))


(DefClass 'tex-map '(or tex-varref svar (and "0" tex-op) (and "1" tex-op) (tex-paren "<" (tex-infix tex-map "|" tex-map)) (throw "「%s」は地図ではありません")))


(DefClass 'tex-skelton '(or tex-varref svar (and "0" tex-op) tex-exp (tex-paren "<" (tex-infix tex-skelton "|" tex-skelton)) (tex-prefix (tex-paren "(" tex-var) (tex-paren "[" (tex-infix tex-map ";" tex-skelton))) (throw "「%s」は骨格ではありません")))


(setq PrimExpPat PEP)

(DefGame 'LambdaTermExp '(("abs-eE" (x ph al be) ((op ":" 7356) ((op "→" 7353) (qq ((unit (paren "(" (svar "x"))) (unit (paren "[" (svar "ph"))))) (var "be" 7354)) (op "Exp" 7357)) ((op ":" 7371) (var "x" 7370) (op "variable" 7372)) ((op ":" 7387) ((op "→" 7384) (var "ph" 7382) (var "al" 7385)) (op "Exp" 7388)) ((op "=" 7403) ((op "abs" 7393) ((op "," 7398) (var "x" 7397) (var "al" 7400))) (var "be" 7404))) ("pair-eE" (ph ps al be) ((op ":" 7281) ((op "→" 7269) (qq ((unit (paren "<" (svar "ph") (op "|" 7263) (svar "ps"))))) (qq ((unit (paren "<" (svar "al") (op "|" 7275) (svar "be")))))) (op "Exp" 7282)) ((op ":" 7300) ((op "→" 7297) (var "ph" 7295) (var "al" 7298)) (op "Exp" 7301)) ((op ":" 7311) ((op "→" 7308) (var "ps" 7306) (var "be" 7309)) (op "Exp" 7312))) ("const-eE" (ga) ((op ":" 7210) ((op "→" 7207) (var "ga" 7205) (var "ga" 7208)) (op "Exp" 7211)) ((op ":" 7220) (var "ga" 7218) (op "constant" 7221))) ("varref-eE" (al) ((op ":" 7167) ((op "→" 7164) (var "al" 7162) (var "al" 7165)) (op "Exp" 7168)) ((op ":" 7177) (var "al" 7175) (op "varref" 7178))) ("abs-abs" (x mu si ga) ((op "=" 7089) ((op "abs" 7070) ((op "," 7075) (var "x" 7074) (qq ((unit (paren "[" (svar "mu") (op ";" 7082) (svar "si"))))))) (qq ((unit (paren "[" (svar "nu") (op ";" 7095) (paren "[" (svar "mu") (op ";" 7101) (svar "ta"))))))) ((op "=" 7127) ((op "abs" 7118) ((op "," 7123) (var "x" 7122) (var "si" 7124))) (qq ((unit (paren "[" (svar "nu") (op ";" 7133) (svar "ta"))))))) ("abs-pair" (x al be mu nu ka si ta) ((op "=" 6953) ((op "abs" 6932) ((op "," 6937) (var "x" 6936) (qq ((unit (paren "<" (svar "al") (op "|" 6945) (svar "be"))))))) (qq ((unit (paren "[" (svar "ka") (op ";" 6959) (paren "<" (svar "si") (op "|" 6964) (svar "ta"))))))) ((op "=" 6990) ((op "abs" 6981) ((op "," 6986) (var "x" 6985) (var "al" 6987))) (qq ((unit (paren "[" (svar "mu") (op ";" 6996) (svar "si")))))) ((op "=" 7014) ((op "abs" 7005) ((op "," 7010) (var "x" 7009) (var "be" 7011))) (qq ((unit (paren "[" (svar "nu") (op ";" 7020) (svar "ta")))))) ((op "=" 7039) ((op "pair" 7028) ((op "," 7035) (var "mu" 7033) (var "nu" 7036))) (var "ka" 7040))) ("abs-varref3" (x al) ((op "=" 6851) ((op "abs" 6841) ((op "," 6846) (var "x" 6845) (var "al" 6848))) (qq ((unit (paren "[" (op "0" 6854) (op ";" 6855) (svar "al")))))) (sexp (cal-q-is-not-core x al))) ("abs-varref2" (x al) ((op "=" 6779) ((op "abs" 6765) ((op "," 6770) (var "x" 6769) (qq ((unit (op "#" 6773)) (svar "al"))))) (qq ((unit (paren "[" (op "0" 6782) (op ";" 6783) (svar "al")))))) (sexp (cal-q-is-core x al))) ("abs-varref1" (x) ((op "=" 6716) ((op "abs" 6707) ((op "," 6712) (var "x" 6711) (var "x" 6714))) ((unit (paren "[" (op "1" 6719) (op ";" 6720) (op "0" 6722))))) ((op ":" 6730) (var "x" 6729) (op "variable" 6731))) ("abs-const" (x al) ((op "=" 6647) ((op "abs" 6638) ((op "," 6643) (var "x" 6642) (var "al" 6644))) (qq ((unit (paren "[" (op "0" 6650) (op ";" 6651) (svar "al")))))) ((op ":" 6662) (var "x" 6661) (op "variable" 6663)) ((op ":" 6675) (var "al" 6673) (op "constant" 6676))) ("inst-abs" (mu nu si ta al) ((op "=" 6566) ((op "inst" 6538) ((op "," 6562) (qq ((unit (paren "[" (svar "mu") (op ";" 6548) (paren "[" (svar "nu") (op ";" 6554) (svar "si")))))) (var "al" 6563))) (qq ((unit (paren "[" (svar "nu") (op ";" 6572) (svar "ta")))))) ((op "=" 6610) ((op "inst" 6589) ((op "," 6606) (qq ((unit (paren "[" (svar "mu") (op ";" 6599) (svar "si"))))) (var "al" 6607))) (var "ta" 6611))) ("inst-pair" (mu nu ka si ta be ga al) ((op "=" 6417) ((op "inst" 6388) ((op "," 6413) (qq ((unit (paren "[" (svar "ka") (op ";" 6398) (paren "<" (svar "si") (op "|" 6405) (svar "ta")))))) (var "al" 6414))) (qq ((unit (paren "<" (svar "be") (op "|" 6424) (svar "ga")))))) ((op "=" 6461) ((op "inst" 6441) ((op "," 6457) (qq ((unit (paren "[" (svar "mu") (op ";" 6451) (svar "si"))))) (var "al" 6458))) (var "be" 6462)) ((op "=" 6486) ((op "inst" 6466) ((op "," 6482) (qq ((unit (paren "[" (svar "nu") (op ";" 6476) (svar "ta"))))) (var "al" 6483))) (var "ga" 6487)) ((op "=" 6502) ((op "pair" 6491) ((op "," 6498) (var "mu" 6496) (var "nu" 6499))) (var "ka" 6503))) ("inst-0" (be al) ((op "=" 6336) ((op "inst" 6317) ((op "," 6332) (qq ((unit (paren "[" (op "0" 6324) (op ";" 6325) (svar "be"))))) (var "al" 6333))) (var "be" 6337))) ("inst-1" (al) ((op "=" 6289) ((op "inst" 6272) ((op "," 6285) ((unit (paren "[" (op "1" 6279) (op ";" 6280) (op "0" 6282)))) (var "al" 6286))) (var "al" 6290))) ("abs-Exp4" (De mu nu ka si) ((op "Exp" 6182) (var "De" 6179) (qq ((unit (paren "[" (svar "mu") (op ";" 6191) (paren "[" (svar "nu") (op ";" 6197) (svar "si"))))))) ((op "=" 6224) ((op "+" 6215) ((op "," 6219) (var "mu" 6217) (var "nu" 6221))) (var "ka" 6225)) ((op "Exp" 6232) (var "De" 6229) (qq ((unit (paren "[" (svar "ka") (op ";" 6241) (svar "si"))))))) ("abs-Exp3" (De mu nu ka si ta) ((op "Exp" 6055) (var "De" 6052) (qq ((unit (paren "[" (svar "ka") (op ";" 6064) (paren "<" (svar "si") (op "|" 6071) (svar "ta"))))))) ((op "Exp" 6092) (var "De" 6089) (qq ((unit (paren "[" (svar "mu") (op ";" 6101) (svar "si")))))) ((op "Exp" 6113) (var "De" 6110) (qq ((unit (paren "[" (svar "nu") (op ";" 6122) (svar "ta")))))) ((op "=" 6143) ((op "pair" 6131) ((op "," 6138) (var "mu" 6136) (var "nu" 6140))) (var "ka" 6144))) ("abs-Exp2" (De al) ((op "Exp" 5989) (var "De" 5986) (qq ((unit (paren "[" (op "0" 5995) (op ";" 5996) (svar "al")))))) ((op "Exp" 6010) (var "De" 6007) (var "al" 6014))) ("abs-Exp1" (De) ((op "Exp" 5947) (var "De" 5944) ((unit (paren "[" (op "1" 5953) (op ";" 5954) (op "0" 5956)))))) ("pair-Exp" (De al be) ((op "Exp" 5881) (var "De" 5878) (qq ((unit (paren "<" (svar "al") (op "|" 5891) (svar "be")))))) ((op "Exp" 5905) (var "De" 5902) (var "al" 5909)) ((op "Exp" 5916) (var "De" 5913) (var "be" 5920))) ("const-Exp" (De ga) ((op "Exp" 5817) (var "De" 5814) (var "ga" 5821)) ((op ":" 5829) (var "De" 5827) (op "varseq" 5830)) ((op ":" 5840) (var "ga" 5838) (op "constant" 5841))) ("varref-Exp" (De al) ((op "Exp" 5746) (var "De" 5743) (var "al" 5750)) ((op ":" 5758) (var "De" 5756) (op "varseq" 5759)) ((op ":" 5769) (var "al" 5767) (op "varref" 5770)) ((op "is-in" 5781) (var "al" 5778) (var "De" 5787))) ("map+pair" (mu nu ga de si ta) ((op "=" 5665) ((op "+" 5639) ((op "," 5652) (qq ((unit (paren "(" (svar "mu") (op "|" 5646) (svar "nu"))))) (qq ((unit (paren "(" (svar "ga") (op "|" 5658) (svar "de"))))))) (qq ((unit (paren "(" (svar "si") (op "|" 5672) (svar "ta")))))) ((op "=" 5697) ((op "+" 5688) ((op "," 5692) (var "mu" 5690) (var "ga" 5694))) (var "si" 5698)) ((op "=" 5711) ((op "+" 5702) ((op "," 5706) (var "nu" 5704) (var "de" 5708))) (var "ta" 5712))) ("map+0R" (mu) ((op "=" 5597) ((op "+" 5587) ((op "," 5591) (var "mu" 5589) ((unit (op "0" 5594))))) (var "mu" 5598))) ("map+0L" (mu) ((op "=" 5562) ((op "+" 5552) ((op "," 5557) ((unit (op "0" 5555))) (var "mu" 5559))) (var "mu" 5563))) ("map-pairup-2" (mu nu) ((op "=" 5499) ((op "pair" 5488) ((op "," 5495) (var "mu" 5493) (var "nu" 5496))) (qq ((unit (paren "(" (svar "mu") (op "|" 5506) (svar "nu")))))) ((op ":" 5518) (var "mu" 5516) (op "map" 5519)) ((op ":" 5526) (var "nu" 5524) (op "nv-map" 5527))) ("map-pairup-1" (mu nu) ((op "=" 5426) ((op "pair" 5415) ((op "," 5422) (var "mu" 5420) (var "nu" 5423))) (qq ((unit (paren "(" (svar "mu") (op "|" 5433) (svar "nu")))))) ((op ":" 5445) (var "mu" 5443) (op "nv-map" 5446)) ((op ":" 5456) (var "nu" 5454) (op "map" 5457))) ("map-pairup-0" () ((op "=" 5381) ((op "pair" 5368) ((op "," 5376) ((unit (op "0" 5374))) ((unit (op "0" 5378))))) ((unit (op "0" 5383))))) ("nv-map-pair2" (mu nu) ((op ":" 5316) (qq ((unit (paren "(" (svar "mu") (op "|" 5309) (svar "nu"))))) (op "nv-map" 5317)) ((op ":" 5329) (var "mu" 5327) (op "map" 5330)) ((op ":" 5337) (var "nu" 5335) (op "nv-map" 5338))) ("nv-map-pair1" (mu nu) ((op ":" 5247) (qq ((unit (paren "(" (svar "mu") (op "|" 5240) (svar "nu"))))) (op "nv-map" 5248)) ((op ":" 5260) (var "mu" 5258) (op "nv-map" 5261)) ((op ":" 5271) (var "nu" 5269) (op "map" 5272))) ("nv-map-1" () ((op ":" 5196) ((unit (op "1" 5194))) (op "nv-map" 5197))) ("map-pair2" (mu nu) ((op ":" 5148) (qq ((unit (paren "(" (svar "mu") (op "|" 5141) (svar "nu"))))) (op "map" 5149)) ((op ":" 5158) (var "mu" 5156) (op "map" 5159)) ((op ":" 5166) (var "nu" 5164) (op "nv-map" 5167))) ("map-pair1" (mu nu) ((op ":" 5085) (qq ((unit (paren "(" (svar "mu") (op "|" 5078) (svar "nu"))))) (op "map" 5086)) ((op ":" 5095) (var "mu" 5093) (op "nv-map" 5096)) ((op ":" 5106) (var "nu" 5104) (op "map" 5107))) ("map-1" () ((op ":" 5040) ((unit (op "1" 5038))) (op "map" 5041))) ("map-0" () ((op ":" 5014) ((unit (op "0" 5012))) (op "map" 5015))) ("judg-defeq" (si ta al) ((op ":" 4939) ((op "≡" 4934) (var "si" 4931) (var "ta" 4936)) (op "judg" 4941)) ((op "denotes" 4964) ((op ":" 4958) (var "si" 4956) (op "judg" 4959)) (var "al" 4972)) ((op "denotes" 4984) ((op ":" 4978) (var "ta" 4976) (op "judg" 4979)) (var "al" 4992))) ("judg-denotes" (si ph mu al) ((op "denotes" 4847) ((op ":" 4841) (var "si" 4839) (op "judg" 4842)) (var "al" 4855)) ((op ":" 4874) ((op "→" 4870) (var "si" 4867) (var "mu" 4872)) (op "judg" 4875)) ((op "=" 4884) (var "mu" 4881) (var "ph" 4886)) ((op ":" 4897) ((op "→" 4893) (var "ph" 4890) (var "al" 4895)) (op "Exp" 4898))) ("term-defeq" (si ta al) ((op ":" 4749) ((op "≡" 4744) (var "si" 4741) (var "ta" 4746)) (op "term" 4751)) ((op "denotes" 4774) ((op ":" 4768) (var "si" 4766) (op "term" 4769)) (var "al" 4782)) ((op "denotes" 4794) ((op ":" 4788) (var "ta" 4786) (op "term" 4789)) (var "al" 4802))) ("term-denotes" (si ph mu al) ((op "denotes" 4657) ((op ":" 4651) (var "si" 4649) (op "term" 4652)) (var "al" 4665)) ((op ":" 4684) ((op "→" 4680) (var "si" 4677) (var "mu" 4682)) (op "term" 4685)) ((op "=" 4694) (var "mu" 4691) (var "ph" 4696)) ((op ":" 4707) ((op "→" 4703) (var "ph" 4700) (var "al" 4705)) (op "Exp" 4708))) ("prop-defeq" (si ta al) ((op ":" 4559) ((op "≡" 4554) (var "si" 4551) (var "ta" 4556)) (op "prop" 4561)) ((op "denotes" 4584) ((op ":" 4578) (var "si" 4576) (op "prop" 4579)) (var "al" 4592)) ((op "denotes" 4604) ((op ":" 4598) (var "ta" 4596) (op "prop" 4599)) (var "al" 4612))) ("prop-denotes" (si ph mu al) ((op "denotes" 4467) ((op ":" 4461) (var "si" 4459) (op "prop" 4462)) (var "al" 4475)) ((op ":" 4494) ((op "→" 4490) (var "si" 4487) (var "mu" 4492)) (op "prop" 4495)) ((op "=" 4504) (var "mu" 4501) (var "ph" 4506)) ((op ":" 4517) ((op "→" 4513) (var "ph" 4510) (var "al" 4515)) (op "Exp" 4518))) ("judg4" (si ta mu nu) ((op ":" 4384) ((op "→" 4370) (qq ((svar "si") (unit (op "⇒" 4365)) (svar "ta"))) (qq ((unit (paren "<" (op "⇒" 4373) (op "," 4374) (svar "mu") (op "," 4378) (svar "nu")))))) (op "judg" 4385)) ((op ":" 4404) ((op "→" 4401) (var "si" 4399) (var "mu" 4402)) (op "b-judg" 4405)) ((op ":" 4418) ((op "→" 4415) (var "ta" 4413) (var "nu" 4416)) (op "judg" 4419))) ("judg3" (si ta mu nu) ((op ":" 4296) ((op "→" 4282) (qq ((svar "si") (unit (op "⇒" 4277)) (svar "ta"))) (qq ((unit (paren "<" (op "⇒" 4285) (op "," 4286) (svar "mu") (op "," 4290) (svar "nu")))))) (op "judg" 4297)) ((op ":" 4316) ((op "→" 4313) (var "si" 4311) (var "mu" 4314)) (op "s-judg" 4317)) ((op ":" 4330) ((op "→" 4327) (var "ta" 4325) (var "nu" 4328)) (op "judg" 4331))) ("judg2" (si mu) ((op ":" 4225) ((op "→" 4222) (var "si" 4220) (var "mu" 4223)) (op "judg" 4226)) ((op ":" 4239) ((op "→" 4236) (var "si" 4234) (var "mu" 4237)) (op "b-judg" 4240))) ("judg1" (si mu) ((op ":" 4178) ((op "→" 4175) (var "si" 4173) (var "mu" 4176)) (op "judg" 4179)) ((op ":" 4192) ((op "→" 4189) (var "si" 4187) (var "mu" 4190)) (op "s-judg" 4193))) ("b-judg" (si ta mu nu) ((op ":" 4113) ((op "→" 4099) (qq ((svar "si") (unit (op "∈" 4094)) (svar "ta"))) (qq ((unit (paren "<" (op "∈" 4102) (op "," 4103) (svar "mu") (op "," 4107) (svar "nu")))))) (op "b-judg" 4114)) ((op ":" 4135) ((op "→" 4132) (var "si" 4130) (var "mu" 4133)) (op "term" 4136)) ((op ":" 4147) ((op "→" 4144) (var "ta" 4142) (var "nu" 4145)) (op "prop" 4148))) ("s-judg3" (al si mu) ((op ":" 4022) ((op "→" 4009) (qq ((unit (paren "(" (svar "al"))) (unit (paren "[" (svar "si"))))) (qq ((unit (paren "(" (svar "al"))) (unit (paren "[" (svar "mu")))))) (op "s-judg" 4023)) ((op ":" 4041) (var "al" 4039) (op "variable" 4042)) ((op ":" 4057) ((op "→" 4054) (var "si" 4052) (var "mu" 4055)) (op "judg" 4058))) ("s-judg2" (si mu) ((op ":" 3947) ((op "→" 3943) (qq ((unit (paren "(" (svar "si"))))) (var "mu" 3944)) (op "s-judg" 3949)) ((op ":" 3966) ((op "→" 3962) (var "si" 3959) (var "mu" 3964)) (op "judg" 3967))) ("s-judg1" (al) ((op ":" 3893) ((op "→" 3889) (var "al" 3886) (var "al" 3891)) (op "s-judg" 3894)) ((op ":" 3906) (var "al" 3904) (op "varref" 3907))) ("prop2" (si ta mu nu) ((op ":" 3817) ((op "→" 3799) (qq ((svar "si") (unit (op "⊃" 3794)) (svar "ta"))) (qq ((unit (paren "<" (op "⊃" 3803) (op "," 3804) (svar "mu") (op "," 3809) (svar "nu")))))) (op "prop" 3819)) ((op ":" 3842) ((op "→" 3837) (var "si" 3834) (var "mu" 3839)) (op "or-prop" 3844)) ((op ":" 3860) ((op "→" 3856) (var "ta" 3853) (var "nu" 3858)) (op "prop" 3861))) ("prop1" (si mu) ((op ":" 3736) ((op "→" 3731) (var "si" 3729) (var "mu" 3733)) (op "prop" 3738)) ((op ":" 3754) ((op "→" 3749) (var "si" 3746) (var "mu" 3751)) (op "or-prop" 3756))) ("or-prop2" (si ta mu nu) ((op ":" 3652) ((op "→" 3634) (qq ((svar "si") (unit (op "∨" 3629)) (svar "ta"))) (qq ((unit (paren "<" (op "∨" 3638) (op "," 3639) (svar "mu") (op "," 3644) (svar "nu")))))) (op "or-prop" 3654)) ((op ":" 3680) ((op "→" 3675) (var "si" 3672) (var "mu" 3677)) (op "and-prop" 3682)) ((op ":" 3699) ((op "→" 3695) (var "ta" 3692) (var "nu" 3697)) (op "or-prop" 3700))) ("or-prop1" (si mu) ((op ":" 3564) ((op "→" 3559) (var "si" 3557) (var "mu" 3561)) (op "or-prop" 3566)) ((op ":" 3585) ((op "→" 3580) (var "si" 3577) (var "mu" 3582)) (op "and-prop" 3587))) ("and-prop2" (si ta mu nu) ((op ":" 3472) ((op "→" 3454) (qq ((svar "si") (unit (op "∧" 3449)) (svar "ta"))) (qq ((unit (paren "<" (op "∧" 3458) (op "," 3459) (svar "mu") (op "," 3464) (svar "nu")))))) (op "and-prop" 3474)) ((op ":" 3500) ((op "→" 3495) (var "si" 3492) (var "mu" 3497)) (op "not-prop" 3502)) ((op ":" 3520) ((op "→" 3515) (var "ta" 3512) (var "nu" 3517)) (op "and-prop" 3522))) ("and-prop1" (si mu) ((op ":" 3382) ((op "→" 3377) (var "si" 3375) (var "mu" 3379)) (op "and-prop" 3384)) ((op ":" 3404) ((op "→" 3399) (var "si" 3396) (var "mu" 3401)) (op "not-prop" 3406))) ("not-prop2" (si mu) ((op ":" 3317) ((op "→" 3304) (qq ((unit (op "¬" 3299)) (svar "si"))) (qq ((unit (paren "<" (op "¬" 3308) (op "," 3309) (svar "mu")))))) (op "not-prop" 3319)) ((op ":" 3339) ((op "→" 3334) (var "si" 3331) (var "mu" 3336)) (op "not-prop" 3341))) ("not-prop1" (si mu) ((op ":" 3240) ((op "→" 3235) (var "si" 3233) (var "mu" 3237)) (op "not-prop" 3242)) ((op ":" 3262) ((op "→" 3257) (var "si" 3254) (var "mu" 3259)) (op "unit-prop" 3264))) ("unit-prop4" (si mu) ((op ":" 3178) ((op "→" 3173) (qq ((unit (paren "[" (svar "si"))))) (var "mu" 3175)) (op "unit-prop" 3180)) ((op ":" 3201) ((op "→" 3196) (var "si" 3193) (var "mu" 3198)) (op "judg" 3203))) ("unit-prop3" (si mu) ((op ":" 3111) ((op "→" 3106) (qq ((unit (paren "(" (svar "si"))))) (var "mu" 3108)) (op "unit-prop" 3113)) ((op ":" 3134) ((op "→" 3129) (var "si" 3126) (var "mu" 3131)) (op "prop" 3136))) ("unit-prop2" (al) ((op ":" 3050) ((op "→" 3046) (var "al" 3043) (var "al" 3048)) (op "unit-prop" 3051)) ((op ":" 3066) (var "al" 3064) (op "varref" 3067))) ("unit-prop1" () ((op ":" 3007) ((op "→" 3002) ((unit (op "⊥" 3000))) ((unit (op "⊥" 3005)))) (op "unit-prop" 3008))) ("inst-term" (si ta mu nu) ((op ":" 2938) ((op "→" 2919) (qq ((unit (op "inst" 2905)) (unit (paren "(" (svar "si") (op "," 2913) (svar "ta"))))) (qq ((unit (paren "<" (op "inst" 2922) (op "," 2926) (svar "mu") (op "," 2931) (svar "nu")))))) (op "term" 2939)) ((op ":" 2958) ((op "→" 2955) (var "si" 2953) (var "mu" 2956)) (op "term" 2959)) ((op ":" 2970) ((op "→" 2967) (var "ta" 2965) (var "nu" 2968)) (op "term" 2971))) ("abs-term" (al si mu) ((op ":" 2835) ((op "→" 2822) (qq ((unit (paren "(" (svar "al"))) (unit (paren "[" (svar "si"))))) (qq ((unit (paren "(" (svar "al"))) (unit (paren "[" (svar "mu")))))) (op "term" 2836)) ((op ":" 2852) (var "al" 2850) (op "variable" 2853)) ((op ":" 2868) ((op "→" 2865) (var "si" 2863) (var "mu" 2866)) (op "term" 2869))) ("c-inst-term" (si ta mu nu) ((op ":" 2746) ((op "→" 2725) (qq ((unit (op "c-inst" 2709)) (unit (paren "(" (svar "si") (op "," 2719) (svar "ta"))))) (qq ((unit (paren "<" (op "c-inst" 2728) (op "," 2734) (svar "mu") (op "," 2739) (svar "nu")))))) (op "term" 2747)) ((op ":" 2766) ((op "→" 2763) (var "si" 2761) (var "mu" 2764)) (op "term" 2767)) ((op ":" 2778) ((op "→" 2775) (var "ta" 2773) (var "nu" 2776)) (op "term" 2779))) ("c-abs-term" (al si ta mu nu) ((op ":" 2625) ((op "→" 2598) (qq ((unit (paren "(" (svar "al") (op "∈" 2587) (svar "si"))) (unit (paren "[" (svar "ta"))))) (qq ((unit (paren "<" (op "c-abs" 2601) (op "," 2606) (svar "mu") (op "," 2611) (paren "(" (svar "al")) (paren "[" (svar "nu"))))))) (op "term" 2626)) ((op ":" 2642) (var "al" 2640) (op "variable" 2643)) ((op ":" 2658) ((op "→" 2655) (var "si" 2653) (var "mu" 2656)) (op "prop" 2659)) ((op ":" 2670) ((op "→" 2667) (var "ta" 2665) (var "nu" 2668)) (op "term" 2671))) ("abort-term" (si mu) ((op ":" 2510) ((op "→" 2495) (qq ((unit (op "abort" 2484)) (unit (paren "(" (svar "si"))))) (qq ((unit (paren "<" (op "abort" 2498) (op "," 2503) (svar "mu")))))) (op "term" 2511)) ((op ":" 2534) ((op "→" 2529) (var "si" 2526) (var "mu" 2531)) (op "term" 2536))) ("in0-term" (si mu) ((op ":" 2434) ((op "→" 2421) (qq ((unit (op "in0" 2412)) (unit (paren "(" (svar "si"))))) (qq ((unit (paren "<" (op "in0" 2424) (op "," 2427) (svar "mu")))))) (op "term" 2435)) ((op ":" 2451) ((op "→" 2446) (var "si" 2443) (var "mu" 2448)) (op "term" 2453))) ("case-term" (si ta rh mu nu pi) ((op ":" 2337) ((op "→" 2315) (qq ((unit (op "case" 2289)) (unit (paren "(" (svar "rh") (op "," 2297) (svar "si") (op "," 2301) (svar "ta"))))) (qq ((unit (paren "<" (op "case" 2318) (op "," 2322) (svar "pi") (op "," 2326) (svar "mu") (op "," 2330) (svar "nu")))))) (op "term" 2339)) ((op ":" 2358) ((op "→" 2355) (var "rh" 2353) (var "pi" 2356)) (op "term" 2359)) ((op ":" 2370) ((op "→" 2367) (var "si" 2365) (var "mu" 2368)) (op "term" 2371)) ((op ":" 2382) ((op "→" 2379) (var "ta" 2377) (var "nu" 2380)) (op "term" 2383))) ("inr-term" (si mu) ((op ":" 2215) ((op "→" 2202) (qq ((unit (op "inr" 2193)) (unit (paren "(" (svar "si"))))) (qq ((unit (paren "<" (op "inr" 2205) (op "," 2208) (svar "mu")))))) (op "term" 2216)) ((op ":" 2239) ((op "→" 2234) (var "si" 2231) (var "mu" 2236)) (op "term" 2241))) ("inl-term" (si mu) ((op ":" 2138) ((op "→" 2125) (qq ((unit (op "inl" 2116)) (unit (paren "(" (svar "si"))))) (qq ((unit (paren "<" (op "inl" 2128) (op "," 2131) (svar "mu")))))) (op "term" 2139)) ((op ":" 2162) ((op "→" 2157) (var "si" 2154) (var "mu" 2159)) (op "term" 2164))) ("right-term" (si mu) ((op ":" 2068) ((op "→" 2053) (qq ((unit (op "right" 2042)) (unit (paren "(" (svar "si"))))) (qq ((unit (paren "<" (op "right" 2056) (op "," 2061) (svar "mu")))))) (op "term" 2069)) ((op ":" 2085) ((op "→" 2080) (var "si" 2077) (var "mu" 2082)) (op "term" 2087))) ("left-term" (si mu) ((op ":" 1992) ((op "→" 1978) (qq ((unit (op "left" 1968)) (unit (paren "(" (svar "si"))))) (qq ((unit (paren "<" (op "left" 1981) (op "," 1985) (svar "mu")))))) (op "term" 1993)) ((op ":" 2009) ((op "→" 2004) (var "si" 2001) (var "mu" 2006)) (op "term" 2011))) ("pair-term" (si ta mu nu) ((op ":" 1896) ((op "→" 1878) (qq ((unit (paren "[" (svar "si") (op "," 1872) (svar "ta"))))) (qq ((unit (paren "<" (op "pair" 1882) (op "," 1886) (svar "mu") (op "," 1890) (svar "nu")))))) (op "term" 1898)) ((op ":" 1920) ((op "→" 1915) (var "si" 1912) (var "mu" 1917)) (op "term" 1922)) ((op ":" 1936) ((op "→" 1931) (var "ta" 1928) (var "nu" 1933)) (op "term" 1938))) ("apply-term" (si ta mu nu) ((op ":" 1789) ((op "→" 1768) (qq ((svar "si") (unit (paren "(" (svar "ta"))))) (qq ((unit (paren "<" (op "apply" 1772) (op "," 1777) (svar "mu") (op "," 1782) (svar "nu")))))) (op "term" 1791)) ((op ":" 1814) ((op "→" 1809) (var "si" 1806) (var "mu" 1811)) (op "term" 1816)) ((op ":" 1830) ((op "→" 1825) (var "ta" 1822) (var "nu" 1827)) (op "term" 1832))) ("λ-term" (si mu) ((op ":" 1704) ((op "→" 1691) (qq ((unit (op "λ" 1686)) (svar "si"))) (qq ((unit (paren "<" (op "λ" 1695) (op "," 1697) (svar "mu")))))) (op "term" 1706)) ((op ":" 1721) ((op "→" 1717) (var "si" 1714) (var "mu" 1719)) (op "term" 1722))) ("unit-term3" (si mu) ((op ":" 1634) ((op "→" 1629) (var "si" 1627) (var "mu" 1631)) (op "term" 1636)) ((op ":" 1652) ((op "→" 1647) (var "si" 1644) (var "mu" 1649)) (op "unit-term" 1654))) ("unit-term2" (si mu) ((op ":" 1572) ((op "→" 1567) (qq ((unit (paren "(" (svar "si"))))) (var "mu" 1569)) (op "unit-term" 1574)) ((op ":" 1595) ((op "→" 1590) (var "si" 1587) (var "mu" 1592)) (op "term" 1597))) ("unit-term1" (al) ((op ":" 1511) ((op "→" 1507) (var "al" 1504) (var "al" 1509)) (op "unit-term" 1512)) ((op ":" 1527) (var "al" 1525) (op "varref" 1528))) ("cons-list1" (mu nu ph ps) ((op "=" 1430) (qq ((unit (paren "<" (svar "mu") (op "," 1424) (svar "nu"))))) (qq ((unit (paren "<" (svar "ph") (op "|" 1436) (svar "ps")))))) ((op "=" 1454) (var "mu" 1452) (var "ph" 1455)) ((op ":" 1461) (var "nu" 1459) (op "nonvoid" 1462)) ((op "=" 1477) (qq ((unit (paren "<" (svar "nu"))))) (var "ps" 1478))) ("cons-list0" (mu ph) ((op "=" 1367) (qq ((unit (paren "<" (svar "mu"))))) (qq ((unit (paren "<" (svar "ph") (op "|" 1373) (op "nil" 1374)))))) ((op "=" 1384) (var "mu" 1382) (var "ph" 1385))) ("nil-list" () ((op "=" 1325) ((unit (paren "<"))) ((unit (op "nil" 1328))))) ("abs-list" (al mu ph) ((op "=" 1266) (qq ((unit (paren "(" (svar "al"))) (unit (paren "[" (svar "mu"))))) (qq ((unit (paren "(" (svar "al"))) (unit (paren "[" (svar "ph")))))) ((op ":" 1284) (var "al" 1282) (op "variable" 1285)) ((op "=" 1298) (var "mu" 1295) (var "ph" 1300))) ("pair-list" (mu nu ph ps) ((op "=" 1191) (qq ((unit (paren "<" (svar "mu") (op "|" 1184) (svar "nu"))))) (qq ((unit (paren "<" (svar "ph") (op "|" 1199) (svar "ps")))))) ((op "=" 1217) (var "mu" 1215) (var "ph" 1218)) ((op "=" 1224) (var "nu" 1222) (var "ps" 1225))) ("const-list" (ga) ((op "=" 1128) (var "ga" 1125) (var "ga" 1130)) ((op ":" 1138) (var "ga" 1136) (op "constant" 1139))) ("varref-list" (al) ((op "=" 1085) (var "al" 1082) (var "al" 1087)) ((op ":" 1095) (var "al" 1093) (op "varref" 1096))) ("closed-exp" (ph) ((op ":" 1033) (var "ph" 1031) (op "closed-exp" 1034)) ((op "exp" 1050) () (var "ph" 1054))) ("abs-exp1" (Ga al ph) ((op "exp" 957) (var "Ga" 954) (qq ((unit (paren "(" (svar "al"))) (unit (paren "[" (svar "ph")))))) ((op ":" 978) (var "al" 976) (op "variable" 979)) ((op "exp" 999) (qq ((svar "Ga") (unit (op "," 993)) (svar "al"))) (var "ph" 1003))) ("abs-exp0" (al ph) ((op "exp" 885) () (qq ((unit (paren "(" (svar "al"))) (unit (paren "[" (svar "ph")))))) ((op ":" 907) (var "al" 905) (op "variable" 908)) ((op "exp" 921) (var "al" 918) (var "ph" 925))) ("pair-exp" (Ga ph ps) ((op "exp" 820) (var "Ga" 817) (qq ((unit (paren "<" (svar "ph") (op "|" 829) (svar "ps")))))) ((op "exp" 841) (var "Ga" 838) (var "ph" 845)) ((op "exp" 852) (var "Ga" 849) (var "ps" 856))) ("const-exp" (Ga ga) ((op "exp" 758) (var "Ga" 755) (var "ga" 762)) ((op ":" 770) (var "Ga" 768) (op "varseq" 771)) ((op ":" 781) (var "ga" 779) (op "constant" 782))) ("varref-exp" (Ga al) ((op "exp" 688) (var "Ga" 685) (var "al" 692)) ((op ":" 700) (var "Ga" 698) (op "varseq" 701)) ((op ":" 711) (var "al" 709) (op "varref" 712)) ((op "is-in" 723) (var "al" 720) (var "Ga" 729))) ("is-in" (mu nu) ((op "is-in" 626) (var "mu" 623) (var "nu" 632)) (sexp (cal-q-is-in mu nu))) ("varref" (al) ((op ":" 571) (var "al" 569) (op "varref" 572)) (sexp (cal-q-varref-p al))) ("varseq1" (Ga) ((op ":" 524) (var "Ga" 522) (op "varseq" 527)) ((op ":" 539) (var "Ga" 537) (op "nv-varseq" 540))) ("varseq0" () ((op ":" 490) () (op "varseq" 493))) ("nv-varseq2" (Ga al) ((op ":" 430) (qq ((svar "Ga") (unit (op "," 425)) (svar "al"))) (op "nv-varseq" 431)) ((op ":" 446) (var "Ga" 444) (op "nv-varseq" 447)) ((op ":" 460) (var "al" 458) (op "variable" 461))) ("nv-varseq1" (al) ((op ":" 369) (var "al" 367) (op "nv-varseq" 371)) ((op ":" 386) (var "al" 384) (op "variable" 387))) ("nonvoid" (mu) ((op ":" 310) (var "mu" 308) (op "nonvoid" 311)) (sexp (cal-q-nonvoid-p mu))) ("constant" (ga) ((op ":" 75) (var "ga" 73) (op "constant" 76)) (sexp (cal-q-exp-const-p ga (quote ("0" "∈" "⇒" "λ" "apply" "pair" "left" "right" "inl" "inr" "case" "in0" "abort" "c-abs" "c-inst" "inst" "⊃" "∧" "∨" "¬" "⊥" "nil"))))) ("variable" (al) ((op ":" 22) (var "al" 20) (op "variable" 23)) (sexp (cal-q-var-p al)))) t)


(setq PEP PrimExpPat)