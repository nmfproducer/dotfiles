(let (var-pat const-pat op-pat open-pat close-pat)
   (setq const-pat '("¢Ý"))
   (setq op-pat '("¢¿" "¢Ê" "¢Ë" "¢Ì" "¢º" "¦Ë" "in0" "abort" "left" "right" "inl" "inr" "case" "c-inst" "inst" "red"))
   (cal-deftokens))


(DefClass 'bj '(or (infix term "red" term) (throw "¡Ö%s¡×¤Ï´ðËÜÈ½ÃÇ¤Ç¤Ï¤¢¤ê¤Þ¤»¤ó")))


(DefClass 'prop '(or "¢Ý" (and (prefix var (paren "[" (list prop ","))) (eval (cons (quote sapp) TREE))) varref (paren "(" prop) (paren "[" judgment) (infix prop "¢¿" prop) (infix prop "¢Ë" prop) (infix prop "¢Ê" prop) (prefix "¢Ì" prop) (throw "¡Ö%s¡×¤ÏÌ¿Âê¤Ç¤Ï¤¢¤ê¤Þ¤»¤ó")))


(DefClass 'term '(or varref (and (catch (prefix svar (paren "[" (list term ",")))) (eval (if cal-meta (cons (quote sapp) TREE) (throw (quote fail) (quote (fail "Not in Meta-mode")))))) (prefix "in0" (paren "(" abs-term)) (prefix-c "abort" (prefix (paren "(" prop) (paren "(" term))) (prefix "¦Ë" c-abs-term) (and (catch (postfix term (paren "(" term))) (eval (cons (quote (op "apply")) TREE))) (and (paren "[" (infix-i term "," term)) (eval (cons (quote (op "pair")) TREE))) (prefix "left" (paren "(" term)) (prefix "right" (paren "(" term)) (prefix "inl" (paren "(" term)) (prefix "inr" (paren "(" term)) (prefix-c "case" (paren "(" (infix-ic term "," (infix-i term "," term)))) c-abs-term (prefix-c "c-inst" (paren "(" (infix-i term "," term))) (and (prefix (paren "(" var) (paren "[" term)) (eval (let ((var (first TREE)) (body (second TREE))) (mAbs var body)))) (and (prefix var (paren "[" (list term ","))) (eval (cons (quote sapp) TREE))) (prefix-c "inst" (paren "(" (infix-i term "," term))) (paren "(" term) (throw "¡Ö%s¡×¤Ï¹à¤Ç¤Ï¤¢¤ê¤Þ¤»¤ó")))


(DefClass 'c-abs-term '(or varref (paren "(" term) (and (prefix (paren "(" (infix var "¢º" prop)) (paren "[" term)) (eval (let ((var (second (first TREE))) (body (second TREE)) (prop (third (first TREE)))) (list (quote (op "c-abs")) prop (mAbs var body)))))))


(DefClass 'tex-bj '(tex-infix tex-term "red" tex-term))


(DefClass 'tex-prop '(or (and "¢Ý" tex-op) (tex-prefix tex-var (and (tex-paren "[" (tex-list tex-prop ",")) (eval (caltex-meta-apply token-list)))) tex-varref (tex-paren "(" tex-prop) (tex-paren "[" tex-judgment) (tex-infix tex-prop "¢¿" tex-prop) (tex-infix tex-prop "¢Ë" tex-prop) (tex-infix tex-prop "¢Ê" tex-prop) (tex-prefix "¢Ì" tex-prop)))


(DefClass 'tex-term '(or tex-varref (tex-prefix (and "in0" tex-op) (tex-paren "(" tex-abs-term)) (tex-prefix (and "abort" tex-op) (tex-prefix (and (paren "(" tex-prop) (eval (list (quote sexp) (concat "_{\\mbox{\\small $" (second TREE) "$}}")))) (tex-paren "(" tex-term))) (tex-prefix (and "¦Ë" tex-op) tex-c-abs-term) (catch (tex-postfix tex-term (tex-paren "(" tex-term))) (tex-paren "[" (tex-infix tex-term "," tex-term)) (tex-prefix (and "left" tex-op) (tex-paren "(" tex-term)) (tex-prefix (and "right" tex-op) (tex-paren "(" tex-term)) (tex-prefix (and "inl" tex-op) (tex-paren "(" tex-term)) (tex-prefix (and "inr" tex-op) (tex-paren "(" tex-term)) (tex-prefix (and "case" tex-op) (tex-paren "(" (tex-infix tex-term "," (tex-infix tex-term "," tex-term)))) tex-c-abs-term (tex-prefix (and "c-inst" tex-op) (tex-paren "(" (tex-infix tex-term "," tex-term))) (tex-prefix (tex-paren "(" tex-var) (tex-paren "[" tex-term)) (tex-prefix tex-var (and (tex-paren "[" (tex-list tex-term ",")) (eval (caltex-meta-apply token-list)))) (tex-prefix (and "inst" tex-op) (tex-paren "(" (tex-infix tex-term "," tex-term))) (throw "¡Ö%s¡×¤Ï¹à¤Ç¤Ï¤¢¤ê¤Þ¤»¤ó")))


(DefClass 'tex-c-abs-term '(or tex-varref (tex-paren "(" tex-term) (tex-prefix (tex-paren "(" (tex-infix tex-var "¢º" tex-prop)) (tex-paren "[" tex-term))))


(DefClass 'abs-term '(or varref (and (prefix (paren "(" var) (paren "[" term)) (eval (let ((var (first TREE)) (body (second TREE))) (mAbs var body))))))


(DefClass 'tex-abs-term '(or tex-varref (tex-prefix (tex-paren "(" tex-var) (tex-paren "[" tex-term))))


(setq PrimExpPat PEP)

(DefGame 'LambdaTermRed '(("trans" (a b c) ((op "red" 1838) (var "a" 1836) (var "c" 1842)) ((op "red" 1849) (var "a" 1847) (var "b" 1853)) ((op "red" 1858) (var "b" 1856) (var "c" 1862))) ("inst-cong" (f a g) ((op "red" 1790) ((op "inst" 1780) (var "f" 1785) (var "a" 1787)) ((op "inst" 1794) (var "g" 1799) (var "a" 1801))) ((op "red" 1809) (var "f" 1807) (var "g" 1813))) ("univ-cong" (a c) ((op "red" 1719) (Abs ((var "x" 1710)) (() () (1)) (sapp (var "a" 1713) ((var 0)))) (Abs ((var "x" 1724)) (() () (1)) (sapp (var "c" 1727) ((var 0))))) (Abs ((var "x" 1738)) (() (() () (1)) (() () (1))) ((op "red" 1746) (sapp (var "a" 1741) ((var 0))) (sapp (var "c" 1750) ((var 0)))))) ("c-inst-cong-R" (f a c) ((op "red" 1660) ((op "c-inst" 1648) (var "f" 1655) (var "a" 1657)) ((op "c-inst" 1664) (var "f" 1671) (var "c" 1673))) ((op "red" 1681) (var "a" 1679) (var "c" 1685))) ("c-inst-cong-L" (f a g) ((op "red" 1593) ((op "c-inst" 1581) (var "f" 1588) (var "a" 1590)) ((op "c-inst" 1597) (var "g" 1604) (var "a" 1606))) ((op "red" 1614) (var "f" 1612) (var "g" 1618))) ("cond-cong" (A b d) ((op "red" 1514) ((op "c-abs") (var "A" 1505) (Abs ((var "x" 1503)) (() () (1)) (sapp (var "b" 1508) ((var 0))))) ((op "c-abs") (var "A" 1521) (Abs ((var "x" 1519)) (() () (1)) (sapp (var "d" 1524) ((var 0)))))) (Abs ((var "x" 1535)) (() (() () (1)) (() () (1))) ((op "red" 1543) (sapp (var "b" 1538) ((var 0))) (sapp (var "d" 1547) ((var 0)))))) ("abort-cong" (A a c) ((op "red" 1451) ((op "abort" 1439) (var "A" 1445) (var "a" 1448)) ((op "abort" 1455) (var "A" 1461) (var "c" 1464))) ((op "red" 1472) (var "a" 1470) (var "c" 1476))) ("in0-cong" (a c) ((op "red" 1392) ((op "in0" 1385) (var "a" 1389)) ((op "in0" 1396) (var "c" 1400))) ((op "red" 1408) (var "a" 1406) (var "c" 1412))) ("case-cong-3" (c a b d) ((op "red" 1329) ((op "case" 1315) (var "c" 1320) (var "a" 1323) (var "b" 1326)) ((op "case" 1333) (var "c" 1338) (var "a" 1341) (var "d" 1344))) ((op "red" 1358) (var "b" 1356) (var "d" 1362))) ("case-cong-2" (c a b d) ((op "red" 1252) ((op "case" 1238) (var "c" 1243) (var "a" 1246) (var "b" 1249)) ((op "case" 1256) (var "c" 1261) (var "d" 1264) (var "b" 1267))) ((op "red" 1281) (var "a" 1279) (var "d" 1285))) ("case-cong-1" (c a b d) ((op "red" 1175) ((op "case" 1161) (var "c" 1166) (var "a" 1169) (var "b" 1172)) ((op "case" 1179) (var "d" 1184) (var "a" 1187) (var "b" 1190))) ((op "red" 1204) (var "c" 1202) (var "d" 1208))) ("inr-cong" (b d) ((op "red" 1111) ((op "inr" 1104) (var "b" 1108)) ((op "inr" 1115) (var "d" 1119))) ((op "red" 1127) (var "b" 1125) (var "d" 1131))) ("inl-cong" (a c) ((op "red" 1061) ((op "inl" 1054) (var "a" 1058)) ((op "inl" 1065) (var "c" 1069))) ((op "red" 1077) (var "a" 1075) (var "c" 1081))) ("apply-cong-R" (f a c) ((op "red" 1013) ((op "apply") (var "f" 1008) (var "a" 1010)) ((op "apply") (var "f" 1017) (var "c" 1019))) ((op "red" 1027) (var "a" 1025) (var "c" 1031))) ("apply-cong-L" (f g a) ((op "red" 961) ((op "apply") (var "f" 956) (var "a" 958)) ((op "apply") (var "g" 965) (var "a" 967))) ((op "red" 975) (var "f" 973) (var "g" 979))) ("¦Ë-cong" (f g) ((op "red" 911) ((op "¦Ë" 908) (var "f" 909)) ((op "¦Ë" 915) (var "g" 916))) ((op "red" 923) (var "f" 921) (var "g" 927))) ("right-cong" (c d) ((op "red" 865) ((op "right" 856) (var "c" 862)) ((op "right" 869) (var "d" 875))) ((op "red" 883) (var "c" 881) (var "d" 887))) ("left-cong" (c d) ((op "red" 810) ((op "left" 802) (var "c" 807)) ((op "left" 814) (var "d" 819))) ((op "red" 827) (var "c" 825) (var "d" 831))) ("pair-cong-R" (a b d) ((op "red" 759) ((op "pair") (var "a" 754) (var "b" 756)) ((op "pair") (var "a" 764) (var "d" 766))) ((op "red" 774) (var "b" 772) (var "d" 778))) ("pair-cong-L" (a b c) ((op "red" 706) ((op "pair") (var "a" 701) (var "b" 703)) ((op "pair") (var "c" 711) (var "b" 713))) ((op "red" 721) (var "a" 719) (var "c" 725))) ("inst" (f a) ((op "red" 661) ((op "inst" 642) (Abs ((var "x" 648)) (() () (1)) (sapp (var "f" 651) ((var 0)))) (var "a" 658)) (sapp (var "f" 665) ((var "a" 667))))) ("case-base-R" (b f g) ((op "red" 605) ((op "case" 588) ((op "inl" 593) (var "b" 597)) (var "f" 600) (var "g" 602)) ((op "c-inst" 609) (var "g" 616) (var "b" 619)))) ("case-base-L" (a f g) ((op "red" 542) ((op "case" 525) ((op "inl" 530) (var "a" 534)) (var "f" 537) (var "g" 539)) ((op "c-inst" 546) (var "f" 553) (var "a" 556)))) ("c-inst" (A b a) ((op "red" 487) ((op "c-inst" 464) ((op "c-abs") (var "A" 474) (Abs ((var "x" 472)) (() () (1)) (sapp (var "b" 477) ((var 0))))) (var "a" 484)) (sapp (var "b" 491) ((var "a" 493))))) ("abort-base" (A a) ((op "red" 426) ((op "abort" 409) (var "A" 415) ((op "in0" 418) (var "a" 422))) ((op "inst" 430) (var "a" 435) (var "A" 437)))) ("abort" (A a) ((op "red" 374) ((op "abort" 349) (var "A" 355) ((op "in0" 358) (Abs ((var "x" 363)) (() () (1)) (sapp (var "a" 366) ((var 0)))))) (sapp (var "a" 378) ((var "A" 380))))) ("case-R" (A B a b c) ((op "red" 319) ((op "case" 280) ((op "inr" 285) (var "c" 289)) ((op "c-abs") (var "A" 296) (Abs ((var "x" 294)) (() () (1)) (sapp (var "a" 299) ((var 0))))) ((op "c-abs") (var "B" 309) (Abs ((var "y" 307)) (() () (1)) (sapp (var "b" 312) ((var 0)))))) (sapp (var "b" 323) ((var "c" 325))))) ("case-L" (A B a b c) ((op "red" 243) ((op "case" 204) ((op "inl" 209) (var "c" 213)) ((op "c-abs") (var "A" 220) (Abs ((var "x" 218)) (() () (1)) (sapp (var "a" 223) ((var 0))))) ((op "c-abs") (var "B" 233) (Abs ((var "y" 231)) (() () (1)) (sapp (var "b" 236) ((var 0)))))) (sapp (var "a" 247) ((var "c" 249))))) ("apply-base" (A f a) ((op "red" 160) ((op "apply") ((op "¦Ë" 154) (var "f" 155)) (var "a" 157)) ((op "c-inst" 164) (var "f" 171) (var "a" 173)))) ("apply" (A b a) ((op "red" 117) ((op "apply") ((op "¦Ë" 101) ((op "c-abs") (var "A" 105) (Abs ((var "x" 103)) (() () (1)) (sapp (var "b" 108) ((var 0)))))) (var "a" 114)) (sapp (var "b" 121) ((var "a" 123))))) ("right" (a b) ((op "red" 72) ((op "right" 58) ((op "pair") (var "a" 65) (var "b" 68))) (var "b" 76))) ("left" (a b) ((op "red" 31) ((op "left" 18) ((op "pair") (var "a" 24) (var "b" 27))) (var "a" 35)))) t)


(setq PEP PrimExpPat)