;; Derivation Game TeX:
;; defined by Masahiko Sato at Tue Oct  7 18:26:56 2003
;; defined by Masahiko Sato at Tue Jul  8 10:52:09 2003
;; defined by Masahiko Sato at Sun Feb  9 22:32:05 2003
;; defined by Masahiko Sato at Sun Jan 19 22:18:28 2003
;; defined by Masahiko Sato at Wed Jan  8 13:48:35 2003
;; defined by Masahiko Sato at Tue Jan  7 22:05:50 2003
;; defined by Masahiko Sato at Thu Jan  2 13:15:16 2003
;; defined by Masahiko Sato at Sun Dec 29 11:25:19 2002
;; defined by Masahiko Sato at Sun Dec 22 22:44:50 2002
;; defined by Masahiko Sato at Sun Dec  8 19:08:45 2002
;; defined by Masahiko Sato at Fri Dec  6 22:58:28 2002
;; defined by Masahiko Sato at Wed Nov 27 17:19:11 2002
;; defined by Masahiko Sato at Sat Nov 16 21:25:17 2002
;; defined by Masahiko Sato at Tue Nov 12 22:18:44 2002
;; defined by Masahiko Sato at Mon Nov 11 22:01:58 2002
;; defined by Masahiko Sato at Mon Nov  4 14:14:18 2002
;; defined by Masahiko Sato at Sat Nov  2 11:20:41 2002
;; defined by Masahiko Sato at Sun Oct 27 21:42:02 2002
;; defined by Masahiko Sato at Wed Oct 16 18:06:17 2002
;; defined by Masahiko Sato at Mon Sep 30 21:18:52 2002
;; defined by Masahiko Sato at Mon Sep 23 22:40:18 2002
;; defined by Masahiko Sato at Mon Sep 16 01:46:33 2002

syntax[

  tex-var ::= var 
  & eval $(caltex-var (second TREE)) ;

  tex-varref ::= varref 
  & eval $(caltex-varref TREE) ;

  tex-op ::= op
  & eval 
    $(let ((op (second TREE))) 
       (list 'sexp (caltex-str-to-tex op)))
  ;

  tex-op-R ::= op
  ;; pad extra space to the Right
  & eval 
    $(let ((op (second TREE))) 
       (list 'sexp (concat (caltex-str-to-tex op) "\\;")))
  ;

  tex-op-LR ::= op
  ;; pad extra space to both Left and Right
  & eval 
    $(let ((op (second TREE))) 
       (list 'sexp (concat "\\;" (caltex-str-to-tex op) "\\;")))
  ;

  tex-op-small ::= op
  & eval 
    $(let ((op (second TREE))) 
       (list 'sexp (caltex-str-to-tex-small op)))
  ;

  tex-unitlist ::= unitlist
  & eval $(caltex-unitlist TREE)
  ;

  tex-judgment ::= sexp & eval $'(sexp "") ;; meta judgment
  |  tex-varref
  ;; the line below is for meta expression
  ;;| tex-prefix(tex-var, tex-paren("[", tex-list(tex-judgment, ",")))
  |  ;; for rules of derivation games
     ;; tex-prefix(tex-var, tex-paren("[", tex-list(tex-judgment, ",")))
     ;; we modify above as below so as to convert "[" into "("
     ;; we note that (ParseString "[abc]") = ((paren "[" (var "abc" 2)))
     catch(tex-prefix(tex-var, 
                tex-paren("[", tex-list(tex-judgment, ","))
                & eval $(caltex-meta-apply token-list)))
  |  catch(tex-bj)
  |  tex-infix(tex-judgment, "¢Í", tex-judgment)
  |  tex-prefix("¦°",
                tex-prefix(tex-paren("(", tex-list(tex-var, ",")),
                           tex-paren("[", tex-judgment)))
  |  paren("(", tex-judgment)
  |  throw "¡Ö%s¡×¤ÏÈ½ÃÇ¤Ç¤Ï¤¢¤ê¤Þ¤»¤ó"
  ;

  tex-derivation ::= infix-ic(dummy, "in", infix-i(dummy, "since", tex-deriv))
  & eval $(third TREE)
  ;

  tex-deriv ::= tex-var
  | tex-varref
  | infix-ic(tex-judgment, "by",
             postfix(tex-op-small, paren("{", list(tex-deriv, ";"))))
    & eval
      $(let ((concl (second (first TREE)))
             (rule (second (second TREE)))
             (prems (third TREE)))
        (if (string= "\\mbox{\\small\\mytt{conj}}" rule)
            ;; CONJ rule is treated differently
            (list 'sexp concl)
         (list 'sexp
          (format "\\infer[%s]{%s}{%s}"
           rule concl (caltex-list-to-and-list prems)))))
  | prefix(paren("(", tex-hyp-seq), paren("[", tex-deriv))
    & eval
      $(let ((binders (first TREE))
             (body (second (second TREE))))
        (list  'sexp
         (format (if vertical "\\ABSv{%s}{%s}" "\\ABS{%s}{%s}")
         (caltex-list-to-comma-list binders) body)))
  ;

  tex-hyp-seq ::= list(tex-hyp, ",") ;

  tex-hyp ::= tex-var
  | tex-infix(tex-var, "::", tex-judgment)
  ;

  tex-hyp2 ::= tex-var
  | infix(tex-var, "::", dummy)
    & eval $(second TREE)
  ;

  tex-hyp-judg ::= tex-infix(tex-hyp-seq 
                             & eval 
                             $(list 'sexp
                                    (caltex-list-to-comma-list TREE)),
                             "¨§", tex-judgment) ;

  tex-sexp ::= sexp 
  & eval $(list 'sexp (caltex-str-to-tex (second TREE))) ;

  tex-sexp-small ::= sexp 
  & eval $(list 'sexp (caltex-str-to-tex-small (second TREE))) ;

  tex-defrule ::=
  (infix(prefix(dummy, paren("(", list(var, ","))), ":", dummy)
   & eval
     $(setq META-VARS (mapcar 'second (second (second TREE))))
  )
  &
  tex-infix(tex-prefix(tex-sexp,
                       tex-paren("(", tex-list(tex-var, ","))),
            ":",
            tex-infix(tex-judgment, ":-",
                      tex-list(tex-judgment, ",")))
  ;

  tex-defrule2 ::=
  (infix(prefix(dummy, paren("(", list(var, ","))), ":", dummy)
   & eval
     $(unless ITALIC
       (setq META-VARS (mapcar 'second (second (second TREE))))
	    ;; for debug
            ;;MV META-VARS
       )
  )
  &
  infix-ic(prefix(tex-sexp, dummy),
        ":",
        infix-i(tex-judgment, ":-", list(tex-judgment, ",")))
  & eval $(caltex-defrule2-fun TREE)
  ;

]