;; derivation game equivalent to Def.el

tokens[

  constant ::= "variable" | "constant" | "operator" | "closepar" | "openpar"
  | "postfix" | "regexp" | "define" | "infixL" | "infixR" | "commit" | "prefix"
  | "prefix-c" | "since" | "throw" | "catch" | "infix" | "infix-i" | "infix-ic"
  | "paren" | "eval" | "list" | "list+" | "nil" | "and" | "abs" | "or"
  ;

  operator ::= "::=" | "," | "|" | "&" | ";" ;

  variable ::= regexp "[a-zA-Z][a-zA-Z0-9_-]*" ;

]

syntax[

  deftokens ::= postfix(ddummy, ";")
    & eval $(let ((debug-on-error t)
	   var-pat const-pat op-pat open-pat close-pat)
       ;; TOKEN-LIST is dynamically bound by the function Parse in parser.el
       (Parse token-list 
	      '(or 
		(postfix (list deftoken ";") ";")
		(throw "トークン定義集合でありません")))
       (setq VarExp
	     (if var-pat
		 (MkOrPattern var-pat)
	       DefaultVarExp))
       (setq ConstExp
	     (if const-pat
		 (concat (regexp-quote name-of-the-game) "\\|"
			 CommonConstExp "\\|" (MkOrPattern const-pat))
	       (concat (regexp-quote name-of-the-game) "\\|" CommonConstExp)))
       (setq OpExp
	     (if op-pat
		 (concat CommonOpExp "\\|" (MkOrPattern op-pat))
	       CommonOpExp))
       (setq OpenExp
	     (if open-pat
		 (concat CommonOpenExp "\\|" (MkOrPattern open-pat))
	       CommonOpenExp))
       (setq CloseExp
	     (if close-pat
		 (concat CommonCloseExp "\\|" (MkOrPattern close-pat))
	       CommonCloseExp))
       (setq PEP
	     (concat ConstExp "\\|" OpExp "\\|" OpenExp "\\|" CloseExp))
       nil
       )
  | throw "トークン定義の最後に必要な「;」がありません"
  ;

  deftoken ::= infix("variable", "::=", list(token-pattern, "|"))
    & eval $(setq var-pat (third TREE))
  | infix("constant", "::=", list(token-pattern, "|"))
    & eval $(setq const-pat (third TREE))
  | infix("operator", "::=", list(token-pattern, "|"))
    & eval $(setq const-pat (third TREE))
  | throw "トークン定義でありません"
  ;

  token-pattern ::= sexp
    & eval
      $(let ((exp (second TREE)))
       (if (stringp exp)
	   (let ((reg-quote (regexp-quote exp)))
	     ;; regxep-quote the EXP if necessary
	     (if (string= exp reg-quote) exp reg-quote))
	 (throw 'err 
		(list 'err (list exp)
		      "「%s」 should be a string"))))
  | prefix("regexp", sexp)
    & eval
      $(let ((exp (second (second TREE))))
       (if (stringp exp)
	   ;; return the EXP as it is
	   exp
	 (throw 'err 
		(list 'err (list exp)
		      "「%s」 should be a string"))))
  ; 

  defclasses ::= postfix(dummy, ";")
    & eval $(let ((debug-on-error t))
       ;; TOKEN-LIST is dynamically bound by the function Parse in parser.el
       (Parse token-list 
	      '(or 
		(postfix (list defclass ";") ";")
		(throw "構文定義集合でありません")))
       nil)
  | throw "構文定義集合の最後に必要な「;」がありません"
  ;

  defclass ::= infix(var, "::=", pattern)
    & eval $(DefClass (intern (second (second TREE))) (second (third TREE)))
  | sexp
    & eval $(eval (second TREE))
  | throw "構文定義でありません"
  ;

  ;; pattern will produce values of the form (sexp " ... ")
  pattern ::= sexp
  | paren("(", pattern)
  | infix(dummy, "|", dummy)
    & commit(list(pattern, "|")
             & eval $(let ((list TREE))
	 (list 'sexp
	       (cons 'or
		     (mapcar
		      (lambda (item) (second item)) list))))
            ) 
  | infix(dummy, "&", dummy)
    & commit(infix-i(pattern, "&", pattern)
             & eval $(let ((arg1 (second (first TREE)))
	     (arg2 (second (second TREE))))
	 (list 'sexp
	       (list 'and arg1 arg2)))
            )
  | prefix("prefix",
           paren("(", infix-i(pattern, ",", pattern)))
    & eval $(let ((arg1 (second (first (second TREE))))
	   (arg2 (second (second (second TREE)))))
       (list 'sexp
	     (list 'prefix arg1 arg2)))
  | prefix("prefix-c",
           paren("(", infix-i(pattern, ",", pattern)))
    & eval $(let ((arg1 (second (first (second TREE))))
	   (arg2 (second (second (second TREE)))))
       (list 'sexp
	     (list 'prefix-c arg1 arg2)))
  | prefix("postfix",
           paren("(", infix-i(pattern, ",", pattern)))
    & eval $(let ((arg1 (second (first (second TREE))))
	   (arg2 (second (second (second TREE)))))
       (list 'sexp
	     (list 'postfix arg1 arg2)))
  | prefix("paren",
           paren("(", infix-i(pattern, ",", pattern)))
    & eval $(let ((arg1 (second (first (second TREE))))
	   (arg2 (second (second (second TREE)))))
       (list 'sexp
	     (list 'paren arg1 arg2)))
  | prefix("list",
           paren("(", infix-i(pattern, ",", pattern)))
    & eval $(let ((arg1 (second (first (second TREE))))
	   (arg2 (second (second (second TREE)))))
       (list 'sexp
	     (list 'list arg1 arg2)))
  | prefix("list+",
           paren("(", infix-i(pattern, ",", pattern)))
    & eval $(let ((arg1 (second (first (second TREE))))
	   (arg2 (second (second (second TREE)))))
       (list 'sexp
	     (list 'list+ arg1 arg2)))
  | prefix("infixL" | "infix",
           paren("(",
                 infix-ic(pattern, ",",
                          infix-i(pattern, ",", pattern)))
           & eval $(let ((arg1 (second (first (second TREE))))
	   (arg2 (second (second (second TREE))))
	   (arg3 (second (third (second TREE)))))
       (list 'sexp
	     (list 'infix arg1 arg2 arg3)))
          )
  | prefix("infixR",
           paren("(",
                 infix-ic(pattern, ",",
                          infix-i(pattern, ",", pattern)))
           & eval $(let ((arg1 (second (first (second TREE))))
	   (arg2 (second (second (second TREE))))
	   (arg3 (second (third (second TREE)))))
       (list 'sexp
	     (list 'infixR arg1 arg2 arg3)))
          ) 
  | prefix("infix-i",
           paren("(",
                 infix-ic(pattern, ",",
                          infix-i(pattern, ",", pattern)))
           & eval $(let ((arg1 (second (first (second TREE))))
	   (arg2 (second (second (second TREE))))
	   (arg3 (second (third (second TREE)))))
       (list 'sexp
	     (list 'infix-i arg1 arg2 arg3)))
          ) 
  | prefix("infix-ic",
           paren("(",
                 infix-ic(pattern, ",",
                          infix-i(pattern, ",", pattern)))
           & eval $(let ((arg1 (second (first (second TREE))))
	   (arg2 (second (second (second TREE))))
	   (arg3 (second (third (second TREE)))))
       (list 'sexp
	     (list 'infix-ic arg1 arg2 arg3)))
          )
  | var & eval $(eval (list 'sexp (intern (second TREE))))
  | prefix("commit", paren("(", pattern))
    & eval $(let ((item (second (second TREE))))
       (list 'sexp
	     (list 'commit item)))
  | prefix("eval", sexp)
    & eval $(let ((item (second (second TREE))))
       (list 'sexp
	     (list 'eval item)))
  | prefix("catch", paren("(", pattern))
    & eval $(let ((item (second (second TREE))))
       (list 'sexp
	     (list 'catch item)))
  | prefix("throw", sexp)
    & eval $(let ((item (second (second TREE))))
       (list 'sexp
	     (list 'throw item)))
  | prefix(var | op, paren("(", dummy))
    & throw "「%s」はTeX変換のコマンドではありません"
  | op & throw "予約語「%s」はTeX変換パターンではありません"
  | throw "「%s」はTex変換パターンではありません"
  ;

  defrules ::= postfix(dummy, ";")
    & eval
      $(let ((rule-list nil))
       (Parse token-list
	      '(or
		(postfix (list defrule ";") ";")
		(throw "導出ゲームの規則集合でありません")))
       (setq RL rule-list)
       (DefGame (intern name-of-the-game) rule-list t)
       nil)
  | throw "推論規則の最後に必要な「;」がありません"
  ;

  defrule ::= infix-i(prefix(sexp-string, paren("(", list(var, ","))),
		      ";",
		      infix-ic(judgment, ":-", list(judgment, ",")))
    & eval
      $(let ((rule-name (second (first (first TREE))))
	   (args (mapcar
		  (lambda (item)
		    (intern (second item)))
		  (second  (first TREE))))
	   (clause (second TREE)))
       (setq rule-list 
	     (cons
	      (cons rule-name (cons args clause))
	      rule-list))
       (setq VAL rule-list)
       nil)
  | throw "「%s」は推論規則でありません"
  ;

sexp-string ::= sexp
    & eval
      $(if (stringp (second TREE))
	 TREE
       (Parse token-list
	      '(throw "「%s」はS式文字列ではありません")))
  | throw "「%s」はS式文字列ではありません"
  ;

]
